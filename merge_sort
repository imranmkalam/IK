def merge_sort(list):
    """
    Sorts a list in ascending order.
    Returns a new sorted list
    Divide : find the midpoint of the list and divided in sublist
    Conquer: Recursively sort the sublists created in the previous step
    Combine: Merge the sorted sublist created in previous step
    """

    if len(list) <= 1:
        return list
    left_half, right_half = split(list)
    left = merge_sort(left_half)
    right = merge_sort(right_half)

    return merge(left, right)

def split(list):
    """
    Divided the unsorted list at Midpoint into sublists
    Returns two sublist - left and right
    """

    mid = len(list)//2
    left = list[:mid]
    right = list[mid:]

    return left, right

def merge(left, right):
    """
    Meges two list(arrays), sorting them in the process
    Returns a new merged list.
    """
    l = []
    i = 0
    j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            l.append(left[i])
            i += 1
        else:
            l.append(right[j])
            j = j+1
    
    while i < len(left):
        l.append(left[i])
        i += 1
    while j < len(right[j]):
        j += 1
    
    return l

alist = [54, 63, 92, 98, 23, 10, 78, 12, 100, 90]
l = merge_sort(alist)
print(l)
